import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

Rectangle {
    id: jlptTab
    color: "#f7f7f7"

    Rectangle {
        id: header
        anchors.top: parent.top
        width: parent.width
        height: 56
        color: "#07c160"

        Text {
            anchors.centerIn: parent
            text: "JLPT Êó•ËØ≠ËÉΩÂäõËÄÉËØï"
            font {
                pixelSize: 18
                weight: Font.Medium
            }
            color: "white"
        }
    }

    ScrollView {
        anchors {
            top: header.bottom
            left: parent.left
            right: parent.right
            bottom: parent.bottom
        }
        clip: true

        ColumnLayout {
            width: parent.width
            spacing: 16
            anchors.margins: 16

            // Á≠âÁ∫ßÈÄâÊã©Âç°Áâá
            Rectangle {
                Layout.fillWidth: true
                height: 120
                radius: 8
                color: "white"

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 12

                    Text {
                        text: "ÈÄâÊã©ËÄÉËØïÁ≠âÁ∫ß"
                        font {
                            pixelSize: 16
                            weight: Font.Medium
                        }
                        color: "#333333"
                    }

                    RowLayout {
                        spacing: 12
                        Repeater {
                            model: ["N5", "N4", "N3", "N2", "N1"]
                            delegate: Rectangle {
                                width: 50
                                height: 32
                                radius: 16
                                color: mouseArea.pressed ? "#e0e0e0" : "#f0f0f0"
                                border {
                                    color: "#07c160"
                                    width: 1
                                }

                                Text {
                                    anchors.centerIn: parent
                                    text: modelData
                                    font.pixelSize: 14
                                    color: "#07c160"
                                }

                                MouseArea {
                                    id: mouseArea
                                    anchors.fill: parent
                                    onClicked: console.log("ÈÄâÊã©Á≠âÁ∫ß:", modelData)
                                }
                            }
                        }
                    }
                }
            }

            // Â§áËÄÉÂä©Âäõ
            Rectangle {
                Layout.fillWidth: true
                height: 150
                radius: 8
                color: "white"

                // Â§áËÄÉÂä©Âäõ

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 12

                    RowLayout {
                        spacing: 8
                        Layout.alignment: Qt.AlignLeft

                        Text {
                            text: "üöÄ"
                            font.pixelSize: 16
                        }

                        Text {
                            text: "Â§áËÄÉÂä©Âäõ"
                            font {
                                pixelSize: 16
                                weight: Font.Medium
                            }
                            color: "#333333"
                        }
                    }

                    RowLayout {
                        spacing: 12

                        Repeater {
                            model: [
                                { icon: "üìù", text: "ÁúüÈ¢òÁªÉ‰π†", rate: (tabController ? tabController.realQuestionsAccuracy : 76) + "%" },
                                { icon: "üìä", text: "Ê®°ÊãüËÄÉËØï", rate: (tabController ? tabController.mockExamAccuracy : 89) + "%" }
                            ]

                            delegate: Item {
                                Layout.fillWidth: true
                                height: 80

                                ColumnLayout {
                                    anchors.fill: parent
                                    spacing: 8

                                    Text {
                                        text: modelData.icon
                                        font.pixelSize: 24
                                        horizontalAlignment: Text.AlignHCenter
                                        Layout.fillWidth: true
                                    }

                                    ColumnLayout {
                                        spacing: 2
                                        Layout.alignment: Qt.AlignHCenter

                                        Text {
                                            text: modelData.text
                                            font.pixelSize: 14
                                            color: "#333333"
                                            horizontalAlignment: Text.AlignHCenter
                                        }

                                        // Ê≠£Á°ÆÁéáÊòæÁ§∫ÁªÑ‰ª∂
                                        Text {
                                            text: "Ê≠£Á°ÆÁéá: " + modelData.rate
                                            font.pixelSize: 12
                                            color: {
                                                var percent = parseInt(modelData.rate) || 0;
                                                if (percent >= 80) return "#07c160";
                                                if (percent >= 60) return "#ff9500";
                                                return "#ff3b30";
                                            }
                                            horizontalAlignment: Text.AlignHCenter
                                        }
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: console.log("ÂºÄÂßãÁªÉ‰π†:", modelData.text)
                                }
                            }
                        }
                    }
                }
            }

            // ‰∏ìÈ°πÂº∫Âåñ
            Rectangle {
                Layout.fillWidth: true
                height: 160
                radius: 8
                color: "white"

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 12

                    RowLayout{
                        spacing: 8
                        Layout.alignment: Qt.AlignLeft

                        Text {
                            text: "üí™"
                            font.pixelSize: 16
                        }

                        Text{
                            text: "‰∏ìÈ°πÂº∫Âåñ"
                            font {
                                pixelSize: 16
                                weight: Font.Medium
                            }
                            color: "#333333"
                        }
                    }

                    RowLayout {
                        spacing: 12

                        Repeater {
                            property var rateColors: [
                                { threshold: 90, color: "#4CAF50", icon: "‚úì" },
                                { threshold: 70, color: "#2196F3", icon: "‚û§" },
                                { threshold: 50, color: "#FFC107", icon: "‚ö†" },
                                { threshold: 0, color: "#F44336", icon: "‚úó" }
                            ]

                            model: [
                                { icon: "üìù", text: "ÊñáÊ≥ï", rate: (tabController ? tabController.grammarAccuracy : 85) + "%" },
                                { icon: "üìñ", text: "ÊñáÂ≠ó„ÉªË™ûÂΩô", rate: (tabController ? tabController.vocabularyAccuracy : 78) + "%" },
                                { icon: "üìñ", text: "Ë™≠Ëß£", rate: (tabController ? tabController.readingAccuracy : 92) + "%" },
                                { icon: "üëÇ", text: "ËÅ¥Ëß£", rate: (tabController ? tabController.listeningAccuracy : 45) + "%" }
                            ]

                            delegate: Item {
                                Layout.fillWidth: true
                                height: 80

                                ColumnLayout {
                                    anchors.fill: parent
                                    spacing: 8

                                    Text {
                                        text: modelData.icon
                                        font.pixelSize: 24
                                        horizontalAlignment: Text.AlignHCenter
                                        Layout.fillWidth: true
                                    }

                                    ColumnLayout {
                                        spacing: 2
                                        Layout.alignment: Qt.AlignHCenter

                                        Text {
                                            text: modelData.text
                                            font.pixelSize: 14
                                            color: "#333333"
                                            horizontalAlignment: Text.AlignHCenter
                                        }

                                        // Ê≠£Á°ÆÁéáÊòæÁ§∫ÁªÑ‰ª∂
                                        RowLayout {
                                            spacing: 4
                                            Layout.alignment: Qt.AlignHCenter

                                            // Áä∂ÊÄÅÂõæÊ†á
                                            Text {
                                                id: rateIcon
                                                text: {
                                                    var percent = parseInt(modelData.rate) || 0;
                                                    if (percent >= 90) return "‚úì";
                                                    if (percent >= 70) return "‚û§";
                                                    if (percent >= 50) return "‚ö†";
                                                    return "‚úó";
                                                }
                                                font {
                                                    pixelSize: Qt.platform.os === "android" ? 10 : 12
                                                    bold: true
                                                }
                                                color: {
                                                    var percent = parseInt(modelData.rate) || 0;
                                                    if (percent >= 90) return "#4CAF50"; // ‰ºòÁßÄ(ÁªøËâ≤)
                                                    if (percent >= 70) return "#2196F3"; // ËâØÂ•Ω(ËìùËâ≤)
                                                    if (percent >= 50) return "#FFC107"; // ‰∏ÄËà¨(ÈªÑËâ≤)
                                                    return "#F44336"; // ËæÉÂ∑Æ(Á∫¢Ëâ≤)
                                                }
                                            }

                                            // ÁôæÂàÜÊØîÊñáÂ≠ó
                                            Text {
                                                text: modelData.rate
                                                font {
                                                    pixelSize: Qt.platform.os === "android" ? 10 : 12
                                                    bold: Qt.platform.os === "android"
                                                }
                                                color: rateIcon.color // ‰øùÊåÅ‰∏éÂõæÊ†áÈ¢úËâ≤‰∏ÄËá¥
                                            }
                                        }
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: console.log("ÂºÄÂßãÁªÉ‰π†:", modelData.text)
                                }
                            }
                        }
                    }
                }
            }

            // Âº∫ÂåñÂ∑©Âõ∫
            Rectangle {
                Layout.fillWidth: true
                height: 150
                radius: 8
                color: "white"

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 12

                    RowLayout {
                        spacing: 8
                        Layout.alignment: Qt.AlignLeft

                        Text {
                            text: "üéñÔ∏è"
                            font.pixelSize: 16
                        }

                        Text {
                            text: "Âº∫ÂåñÂ∑©Âõ∫"
                            font {
                                pixelSize: 16
                                weight: Font.Medium
                            }
                            color: "#333333"
                        }
                    }

                    RowLayout {
                        Layout.fillWidth: true
                        spacing: 0

                        Repeater {
                            model: [
                                { 
                                    icon: "üèÜ", 
                                    text: "ÂøÖ‰ºöÈ¢ò/ÊòìÈîôÈ¢ò", 
                                    description: "Â§ßÊï∞ÊçÆÁ≠õÈÄâÂá∫ÁöÑÂøÖ‰ºöÈ¢òÂíåÊòìÈîôÈ¢ò",
                                    rate: (tabController ? tabController.keyQuestionsAccuracy : 78) + "%" 
                                }
                            ]

                            delegate: Rectangle {
                                Layout.fillWidth: true
                                height: 80
                                color: "transparent"

                                RowLayout {
                                    anchors.fill: parent
                                    anchors.margins: 12
                                    spacing: 16

                                    // Â∑¶‰æßÂõæÊ†á
                                    Text {
                                        text: modelData.icon
                                        font.pixelSize: 32
                                        color: "#07c160"
                                        Layout.alignment: Qt.AlignVCenter
                                    }

                                    // Âè≥‰æßÂÜÖÂÆπ
                                    ColumnLayout {
                                        spacing: 4
                                        Layout.fillWidth: true
                                        Layout.alignment: Qt.AlignVCenter

                                        // Ê†áÈ¢ò
                                        Text {
                                            text: modelData.text
                                            font {
                                                pixelSize: 16
                                                weight: Font.Medium
                                            }
                                            color: "#333333"
                                        }

                                        // ÊèèËø∞ÊñáÊú¨
                                        Text {
                                            text: modelData.description
                                            font.pixelSize: 12
                                            color: "#666666"
                                            wrapMode: Text.Wrap
                                            Layout.fillWidth: true
                                        }
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    onClicked: console.log("ÂºÄÂßãÁªÉ‰π†:", modelData.text)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    function updateRate(type, percent) {
        // Áõ¥Êé•Ë∞ÉÁî®C++Á´ØÁöÑÊõ¥Êñ∞ÂáΩÊï∞
        if (tabController) {
            tabController.updateRate(type, percent);
        }
    }
    
    // ÊâπÈáèÊõ¥Êñ∞ÂáΩÊï∞
    function updateAllRates(rateData) {
        if (tabController) {
            tabController.updateAllRates(rateData);
        }
    }
    
    // Ëé∑ÂèñÊâÄÊúâÊ≠£Á°ÆÁéáÊï∞ÊçÆ
    function getAllRates() {
        return tabController ? tabController.getAllRates() : {};
    }
}
